Концепт:
Игра расскажет историю одного мага, потерявшего память, в постапокалиптическом фэнтезийном мире. Он стремится найти оставшихся в живых людей, развивает свои магические способности и сражается с нечистью. В этом мире магия напрямую связана с воспоминаниями: каждое новое изученное заклинание возвращает герою частичку его прошлого. По мере продвижения герой будет раскрывать свою истинную сущность и осознавать свою роль в катастрофе, уничтожившей мир.
Сеттинг:
Мир разрушен катастрофой. Цивилизации погибли, оставшиеся руины и пустоши заполнены нечистью и монстрами. Среди руин древних городов, лесов, пустынь и разрушенных поселений встречаются осколки магических структур и фрагменты утерянных знаний. Игрок путешествует по этим опасным территориям, сталкиваясь с чудовищами и фрагментами своего прошлого.
Целевая аудитория:
Поклонники фэнтези, рпг и глубоких, морально сложных игр, с элементами исследования, богатым нарративом и сильными персонажами, возрастом ~ от 18 до 35 лет.
Структура:
Игра состоит из нескольких уровней (локаций), каждая из которых имеет уникальную атмосферу и усиливающуюся нечисть. В процессе игры главный герой будет развиваться, изучать новые заклинания, восстанавливая свои воспоминания и распутывая загадку о себе и своей роли в катастрофе. 
Между локациями будут вставки, молвящие, что прошло несколько месяцев странствий героя. Эти моменты помогут плавно переходить между различными биомами.
Уровни/локации:
1.	Первая локация — Пустошь (начало игры):
•	Описание: Пустошь, разрушенная магией. Остались только руины.
•	Боевая механика: В начале игры герой имеет 4 базовых заклинания: IGNIS, WATER, TERRA, AERO. Эти заклинания служат для борьбы с первой нечистью.
•	Особенности: Голос в голове направляет героя и учит основам магии, объясняя как использовать заклинания. Использование заклинаний восстанавливает детские воспоминания главного героя.

2.	Вторая локация — Снежные руины:
•	Описание: Прекрасные, но разрушенные зимние руины, покрытые снегом и льдом.
•	Боевая механика: Нечисть на этом уровне сильнее, чем на первом. Голос дает более мощные заклинания, но с каждым новым заклинанием, герой начинает вспоминать более старшие годы своей жизни.
•	Заклинания: Больше магии, которую голос неохотно даёт. Эти новые заклинания открывают воспоминания о взрослом Вехне, о его становлении как магистере.

3.	Третья локация — Песчаные пустоши:
•	Описание: Бескрайние песчаные равнины.
•	Боевая механика: Враги становятся ещё более опасными. Голос даёт более сильные заклинания.
•	Заклинания: Новый набор заклинаний открывает воспоминания о том времени, когда Вехна становился королевским магом. Голос начинает быть менее уверенным, его повествование становится путанным.

4.	Четвертая локация — Сожженные джунгли:
•	Описание: Опустошенные, выжженные джунгли, уничтоженные катастрофой.
•	Боевая механика: Враги становятся ещё более опасными. Голос даёт более сильные заклинания.
•	Заклинания: Герой использует сильные заклинания, связанные с огненной магией, и раскрывает новые воспоминания о становлении личом, вызывая вопросы, точно ли главному герою принадлежат эти воспоминания. Голос в этот момент всё больше меняется, его интонации становятся угрозой.

5.	Пятая локация — Эпицентр катастрофы (Кратер):
•	Описание: Кратер, место начала катастрофы, где мир разрушился. Все начинается здесь.
•	Боевая механика: На этом уровне герой встречает самую сильную нечисть, огромного монстра. Голос очень неохотно даёт последние, самые мощные заклинания, которые необходимы для победы.
•	Заклинания: На этом уровне появляется последний шанс для героя. Вспоминаются окончательные моменты из прошлого Вехны, и приходит осознание того, что он — сам Вехна. Голос требует, чтобы герой раскопал филактерий и объединился с ним.
2. Развитие и выбор:
Как только главный герой добирается до эпицентра катастрофы, у него появляется выбор — объединиться с филактерием и вернуть свою силу, став Вехной без человечности, или разбить филактерий, чтобы остаться человеком и попытаться изменить всё, оставив концовку открытой.
•	Объединение с филактерием: Возврат силы и превращение в абсолютного Вехну.
•	Разрушение филактерия: Оставаться человеком, с возможностью изменять катастрофу и строить новый путь.
В зависимости от выбора игрока, игра может завершиться открытым концом, предоставляя игроку шанс на восстановление мира или поглощение всей магии и силы.

3. Механика боя:
Вся механика боевых заклинаний строится на уникальной системе набора букв для составления магии. Каждое заклинание требует от героя внимательности и концентрации.
•	Алгоритм: При каждом вызове заклинания появляется строка из случайных букв. Для успешного использования заклинания игрок должен нажимать на правильные буквы в этой строке, составляя из них заклинание.
•	Система: Игроки должны собирать буквы в определенной последовательности, чтобы активировать заклинание. Например, для заклинания "IGNIS" нужно нажать на соответствующие буквы в правильном порядке.
•	Если последовательность букв собрана верно — заклинание активируется.
•	Если последовательность букв ошибочна — заклинание не происходит, и заклинание нужно попытаться вызвать снова.
Игроки:
1 игрок, играющий за начинающего мага , который по мере игры раскрывает свои способности и вспоминает, кто он на самом деле.
Ход игры:
Главный герой — бывший лич, причём не просто лич, а сам Вехна(Легендарный лич из днд, его знают все, кто играл). Он уже и так был сильнейшим существом в этом мире, буквально младшим богом по лору, но младший - это младший, да даже став старшим, ему было бы мало, поэтому Вехна захотел подчинить себе всю мультивселенную, преобразовать её по своему образу и подобию... но что-то пошло не так. В момент, когда он должен был стать абсолютным существом, произошёл выброс магии колоссальной силы. Взрыв уничтожил всё живое на земле. Цивилизации рухнули, все существа исчезли, остались только нечисть и руины.... 
Но Вехна - лич. Он не мог просто умереть. Его филактерий уцелел, и потому он начал перерождение, причем мгновенное, ведь он не просто лич, а младший бог, однако всё пошло не совсем по плану.... Обычно лич восстанавливается в своём идеальном теле, но в этот раз был один небольшой нюанс, ОГРОМНЫЙ ВЗРЫВ.... Обычно тело лича создаётся по хронологии: от младенца до юноши, от юноши до зрелого волшебника, затем переходило в его первую форму лича, потом следующую и так далее до последнего вида... И всё так и было, перерождение шло с невероятной скоростью..., но прежде чем оно завершилось, взрывная волна оттолкнула его от филактерия на моменте юного, но уже невероятно сильного волшебника, ведь Вехна всегда был талантлив, за счёт чего и стал таким сильным... 
Его откинуло в этом теле, после чего он уже приходит в себя без воспоминаний... 
Когда он приходит в себя, перед ним только пустошь, почти ничего нет, но есть одна тонкость, голос в голове.... И он ведёт его вперёд. Объясняет магию, даёт 4 основных заклинания(при использовании которых в первый раз мы видим детство Вехны) и говорит, что этого достаточно. И... направляет.... он говорит гг куда идти, обещая, что он может помочь, но не может пока сказать всё... 
Герой отправляется в путь. Мы сражаемся с первой нечистью, проходим эту локацию, потом переход, мол прошло несколько месяцев странствий... ну и это тип "второй уровень". Локация меняется, к примеру, на снежные руины, или песчаные, вариантов локаций много.. Тут нечисть уже сильнее и голос неохотно даёт нам более сильные заклинания, но они открывают нам воспоминания уже более старшие годы Вехны. Потом проходим эту локацию и дальше третий уровень и т.д. 4-6 раз, это отчасти повторяется, пустоши сменяются снежными руинами, потом - развалинами мёртвых пустынь, сожжённые джунгли... Проходят годы. Наш герой сражается с нечистью, которая всё сильнее, узнаёт новые заклинания, движется вперёд, идёт туда, куда указывает голос. Параллельно вспоминая всю жизнь, детство, юность, становление королевским магом, становление старшем магом, потом уже ближе к самому концу, момент, когда он стал личом… СТОП... ЛИЧОМ???? что-то не так..... 
Воспоминания кажутся чужими, главный герой уверен, что он видит чужие воспоминания, а не свою жизнь, как считал раньше... 
Герой в смятении и задаётся вопросами на протяжении всего пути: 
Кто этот голос... 
Зачем он мне помогает? 
Он единственный, кто помогает мне он друг? 
Почему он так неохотно даёт новые заклинания? 
Почему он не говорит всей правды?!?!?! 
ОН ЯВНО ЧТО ТО СКРЫВАЕТ! 
Чем ближе к эпицентру катастрофы, тем сильнее становится нечисть. И голос. Он тоже меняется. Иногда дружелюбный, иногда… почти угрожающий. Иногда его рассказы о прошлом звучат не так, как раньше. Может, он просто ошибается? Может, память повреждена? Или он врёт?.. 
Герой добирается до последней локации, эпицентра катастрофы. Кратер. Здесь всё началось. Он встречает сильнейшую нечисть, огромного монстра, поэтому ПРЯМ ОЧЕНЬ НЕОХОТНО, но голосу приходится дать главному герою сильнейшии заклинания, с помощью которых он побеждает, но приходит воспоминание, последнее, где он уже младший бог делает ритуал, подчиняя мультивселенную, но проходит неудачную реинкарнацию, и тут приходит осознание, что это он, он и есть Вехна, он виновен в этой катастрофе. Он уничтожил этот мир. Он — причина всего. А этот голос - это вторая часть души, которая раскололась при взрыве... Голос говорит нам откопать филактерий в кратере, мы это делаем и тут он уже 
не уговаривает, а настаивает: 
"Объединись со мной. Верни свою силу. Стань тем, кем должен быть." 
Голос обещает нам вернуть всю прошлую силу, снова стать богом, говорит, что всё равно уже ничего не сделать... Но теперь у нас есть выбор. 
Объединиться с филактерием - и стать Вехной снова, но уже без человечности. Вернуть былую силу, но потерять себя. 
Разбить филактерий — и остаться человеком с надеждой всё вернуть и изменить, а также открытой концовкой :)
Цель игры:
Узнать, что ж в итоге произошло и кто такой наш гг на самом деле
Реализация:
Игра в текстовом формате на консоли c++. 

АРХИТЕКТУРА
СПЕЦИФИКАЦИИ ВСЕХ МОНСТРОВ
ЛОКАЦИЯ	НАЗВАНИЕ	УРОН	HP	ЭФФЕКТ
ПУСТОШЬ	Зомби	2	5	После своей атаки, если игрок его атаковал — получает +1 урона
ПУСТОШЬ	Низший скелет	3	4	Нет эффекта
СНЕЖНЫЕ РУИНЫ	Драург	4	8	25% шанс нанести двойной урон (2 удара по 4)
СНЕЖНЫЕ РУИНЫ	Гуль	5	10	50% шанс парализовать игрока на 1 ход
ПЕСЧАНЫЕ ПУСТОШИ	Ревенант	6	14	Иммунитет к огню
ПЕСЧАНЫЕ ПУСТОШИ	Мумия	7	16	50% шанс уменьшить урон игрока вдвое на 3 хода
СОЖЖЁННЫЕ ДЖУНГЛИ	Кровопийца	8	20	30% шанс отразить следующую атаку игрока
СОЖЖЁННЫЕ ДЖУНГЛИ	Дух	9	22	Иммунитет к льду
КРАТЕР	Рыцарь смерти	10	50	25% шанс нанести тройной урон (30 суммарно)

СПЕЦИФИКАЦИИ ВСЕХ ЭФФЕКТОВ
НАЗВАНИЕ	ОПИСАНИЕ
ГОРЕНИЕ	Наносит 2 урона в конце хода, 2 хода
ОСЛАБЛЕНИЕ	Урон ×0.5 на 2 хода
ЗАМОРОЗКА	Пропускает 1 ход
ПАРАЛИЧ	Пропускает 1 ход
ВАМПИРИЗМ	+3 урона игроку, -3 врагу, 2 хода
УКЛОНЕНИЕ	50% шанс избежать урона
УСИЛЕНИЕ	+50% к следующей атаке
ИММУНИТЕТ	Не воспринимает определённый эффект
СПЕЦИФИКАЦИИ ВСЕХ ЗАКЛИНАНИЙ
Начальные заклинания (даются в начале игры):
1. IGNIS (Огонь)
Описание: Поджигает врага, нанося урон каждый ход (эффект «Горение» на 2 хода).
Механика:
•	Наносит 5 урона сразу
•	Затем 2 урона в конце следующего и ещё одного хода (итого 9)
Применение:
cast IGNIS — в консоли появляется:
“Ты поджигаешь врага. Он начинает гореть.”
2. TERRO (Земля)
Описание: Сковывает врага, снижая его урон на 50% на 2 хода.
Механика:
•	Эффект «Замедление» — враг наносит меньше урона
Применение:
cast TERRO —
“Ты насылаешь тяжесть земли. Враг замедлен.”
3. AERO (Воздух)
Описание: Шанс уклонения от следующей атаки (50%), усиление следующей атаки (50%)
Механика:
•	На 1 ход:
•	Если враг атакует, есть шанс полностью избежать урона
•	Гарантировано усиление следующей атаки
Применение:
cast AERO —
“Порыв ветра окутывает тебя. Ты становишься быстрее.”
4. WATER (Вода)
Описание: Лечит 5 HP.
Механика:
•	Простое восстановление здоровья
Применение:
cast WATER —
“Прохладная вода заливает раны. Ты восстанавливаешь здоровье.”
Промежуточные заклинания (получаются в ходе игры):
5. VAMPIRUM (Вампиризм)
Описание: Вампирское заклинание. Вытягивает силу врага — ворует 3 HP врага и лечит тебя на 3 HP.
Механика:
•	У врага -3 HP
•	Ты получаешь +3 к урону
•	Восстанавливаешь 3 HP
Применение:
cast VAMPIRUM —
“Ты насылаешь проклятие крови. Жизненная сила врага уходит к тебе.”
6. GLACIA (Лёд)
Описание: Обрушивает ледяной удар, нанося 5 урона и с шансом 50% замораживает врага на 1 ход.
Механика:
•	5 гарантированного урона
•	50% шанс обездвижить врага на следующий ход
Применение:
cast GLACIA —
“Ледяные осколки пронзают врага. Он может быть заморожен.”
7. VITA (Жизнь)
Описание: Мгновенно лечит 15 HP и снимает все негативные эффекты.
Механика:
•	Сильное исцеление, пригодится в критический момент
Применение:
cast VITA —
“Свет наполняет тебя. Боль отступает.”
Финальное заклинание (по сути только для победы над боссом):
8. UMBRA (Тьма)
Описание: Призывает абсолютную тьму, уничтожающую всё.
Механика:
•	Наносит 25 урона врагу
•	Похищает 15 твоего здоровья
Применение:
cast UMBRA —
“Тьма поглощает всё. Ни один свет не спасёт врага. Но за силу нужно платить.. своей кровью.”
МЕХАНИКА БОЯ
Вся система боевых заклинаний основана на уникальной механике набора букв, требующей от игрока внимания, реакции и запоминания. Это не просто «нажал кнопку — и победил», а полноценная мини-игра в бою.
Основной алгоритм:
•	При каждом вызове заклинания появляется строка из случайных букв.
•	Чтобы активировать заклинание, игрок должен выбрать буквы в правильном порядке, составляя нужное слово.
•	Например, для заклинания IGNIS игрок поочерёдно выбирает буквы I → G → N → I → S из строки.
Условия активации:
•	Если последовательность собрана верно — заклинание активируется.
•	Если игрок ошибся — заклинание не срабатывает, попытку можно повторить.
Система получения заклинаний:
•	Заклинания выдаются только по сюжету, при появлении первого врага на каждом уровне голосом в голове.
•	Использовать более сложные заклинания раньше времени нельзя.
•	Это делает механику более глубокой и сюжетно обоснованной.

Исследование: Прототип механики
Мы реализовали первый прототип этой системы с помощью SFML — библиотеки для создания 2D-приложений.
Как это работает:
•	Запускается игровое окно.
•	В нём отображается случайная строка символов.
•	Игроку нужно вводить буквы заклинания в правильном порядке, выбирая их из строки.
•	После каждого правильного нажатия строка обновляется новыми случайными буквами.
Что получилось:
•	Механика вышла живой, интересной и затягивающей.
•	Процесс напоминает мини-головоломку, что выделяет бой среди обычных RPG.
•	Это не «просто нажал кнопку» — заклинания нужно помнить или записывать, что добавляет стратегический элемент.
•	В отличие от типичных текстовых RPG, где через 10 минут ты уже действуешь на автомате, здесь каждое заклинание — это небольшая битва за фокус.
Вывод
Механика получилась по-настоящему увлекательной. Благодаря простоте реализации и глубине восприятия она будет ключевой фишкой боевой системы игры.
Скриншоты прототипа
 
 
Итоговый код прототипа
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <unordered_set>

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 600;
const std::vector<std::string> SPELLS = { "IGNIS", "WATER", "TERRA", "AERO" };

std::string generateLetterString(int length) {
    std::string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    std::string result;
    std::unordered_set<char> neededLetters = { 'I', 'G', 'N', 'S', 'W', 'A', 'T', 'E', 'R', 'O' };

    while (result.size() < length) {
        char letter = letters[rand() % letters.size()];
        result += letter;
    }

    for (char needed : neededLetters) {
        result[rand() % length] = needed;
    }

    return result;
}

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Magic Spell Casting");

    sf::Font font;
    if (!font.loadFromFile("arial.ttf")) {
        std::cerr << "Error loading font!" << std::endl;
        return -1;
    }

    std::string letterString = generateLetterString(20);
    std::string castedSpell;

    sf::Text lettersText(letterString, font, 30);
    lettersText.setPosition(50, 50);
    lettersText.setFillColor(sf::Color::White);

    sf::Text castText("", font, 30);
    castText.setPosition(50, 100);
    castText.setFillColor(sf::Color::Yellow);

    sf::Text resultText("", font, 30);
    resultText.setPosition(50, 150);
    resultText.setFillColor(sf::Color::Green);

    sf::RectangleShape castButton(sf::Vector2f(200, 50));
    castButton.setPosition(300, 500);
    castButton.setFillColor(sf::Color(50, 50, 200));

    sf::Text castButtonText("Cast", font, 30);
    castButtonText.setPosition(340, 510);
    castButtonText.setFillColor(sf::Color::White);

    sf::RectangleShape background(sf::Vector2f(WINDOW_WIDTH, WINDOW_HEIGHT));
    background.setFillColor(sf::Color(30, 30, 40));

    std::vector<sf::Text> letterTexts;
    for (int i = 0; i < letterString.size(); ++i) {
        sf::Text letterText(std::string(1, letterString[i]), font, 30);
        letterText.setPosition(50 + i * 30, 50);
        letterText.setFillColor(sf::Color::White);
        letterTexts.push_back(letterText);
    }

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2i mousePos = sf::Mouse::getPosition(window);

                if (castButton.getGlobalBounds().contains(static_cast<sf::Vector2f>(mousePos))) {
                    bool success = false;
                    for (const auto& spell : SPELLS) {
                        if (castedSpell == spell) {
                            resultText.setString("Successfully cast: " + spell + "!");
                            success = true;
                            castedSpell = "";
                            break;
                        }
                    }

                    if (!success) {
                        resultText.setString("Failed to cast spell.");
                    }

                    castedSpell = "";
                }

                for (int i = 0; i < letterString.size(); ++i) {
                    if (letterTexts[i].getGlobalBounds().contains(static_cast<sf::Vector2f>(mousePos))) {
                        castedSpell += toupper(letterString[i]);
                        letterString = generateLetterString(20);
                        letterTexts.clear();
                        for (int i = 0; i < letterString.size(); ++i) {
                            sf::Text letterText(std::string(1, letterString[i]), font, 30);
                            letterText.setPosition(50 + i * 30, 50);
                            letterText.setFillColor(sf::Color::White);
                            letterTexts.push_back(letterText);
                        }
                    }
                }
            }
        }

        castText.setString("Cast: " + castedSpell);

        window.clear();
        window.draw(background);
        for (const auto& letterText : letterTexts) {
            window.draw(letterText);
        }
        window.draw(castText);
        window.draw(resultText);
        window.draw(castButton);
        window.draw(castButtonText);
        window.display();
    }

    return 0;
}






ДИАГРАММА КЛАССОВ
 
ФОРМУЛЫ
Формула атаки героя:
int heroDamage = isFrozen || isParalyzed ? 0 : round(baseDamage * damageModifier);
Формула атаки монстра:
int monsterDamage = isFrozen ? 0 : round(baseDamage * damageModifier);
КЛАССЫ
Класс: Hero
Характеристики:
•	int health — здоровье (изначально 15)
•	int baseDamage — базовый урон (например 3)
•	std::vector<Effect> activeEffects — активные эффекты
•	std::vector<Spell> knownSpells — изученные заклинания
•	bool isFrozen — заморозка
•	bool isParalyzed — паралич
•	bool isBurning — горит?
•	int burnDuration — сколько ещё ходов горит
•	float damageModifier — множитель урона (учитывает дебаффы)
•	bool reflectNextHit — отражение (если получен от духа)
Методы:
•	void castSpell(std::string name, Monster& target)
	Применяет заклинание по имени к цели (монстру).
	Учитывает эффекты, урон, исцеление, иммунитеты.
	Активирует все механики заклинания (включая баффы на героя).
•	void attack(Monster& target)
	Атакует монстра с учётом всех активных баффов и дебаффов.
	Если активен усиление атаки — увеличивает урон.
	Если парализован или заморожен — ход пропускается.
	Проверяет отражение урона монстром.
•	void applyEffects()
	Применяется в начале хода.
	Обрабатывает все активные эффекты (горение, усиление, уклонение и т.п.).
	Обновляет длительность, снимает закончившиеся.
•	void receiveDamage(int amount)
	Уменьшает текущее здоровье на amount.
	Проверяет на смерть (если здоровье ≤ 0).
•	void heal(int amount)
	Увеличивает здоровье (не больше максимума).
	Используется заклинаниями WATER, VAMPIRUM, VITA.

Класс: Monster 
Характеристики:
•	std::string name — имя монстра (например, "Зомби")
•	int baseDamage — базовый урон
•	int health — текущий запас здоровья
•	std::vector<Effect> activeEffects — активные эффекты, действующие на монстра (горение, замедление и т.д.)
•	Effect specialEffect — особый эффект (например, "тройной удар", "паралич")
•	float effectChance — шанс применения specialEffect (например, 0.25 для 25%)
•	bool immuneToFire — иммунитет к эффекту огня (например, "Ревенант")
•	bool immuneToIce — иммунитет к эффекту льда (например, "Дух")
•	bool isFrozen — не может действовать в текущем ходу
•	bool isParalyzed — шанс пропуска хода
•	float damageModifier — множитель урона (например, 0.5 при замедлении)
•	bool reflectNextAttack — если активен, следующая атака будет отражена
•	bool attackedLastTurn — флаг для логики типа "Зомби" (ответный урон игроку, если был атакован)
Методы:
•  void attack(Hero& hero)
	Атакует героя с учётом всех модификаторов урона, заморозки и т.д.
	Если isFrozen — пропускает ход.
	Учитывает damageModifier.
	Применяет applySpecialEffect() после атаки.
•  void applySpecialEffect(Hero& hero)
	Срабатывает с шансом effectChance.
	Вешает specialEffect на героя или влияет напрямую (например, тройной удар).
•  void applyEffects()
	Обрабатывает каждый активный эффект в списке activeEffects.
	Например, горение наносит урон, замедление влияет на damageModifier.
•  void receiveDamage(int amount)
	Уменьшает health.
	Ставит флаг attackedLastTurn = true.
•  void applyImmunityCheck(Effect e)
	При попытке применить эффект проверяет иммунитеты.
	Например, e.name == "Burning" и immuneToFire == true → эффект не вешается.
•  void onTurnStart()
	Сброс attackedLastTurn = false
	Применение applyEffects()
•  bool isAlive()
	Возвращает true, если health > 0

Класс: Spell
Характеристики:
•	std::string name — название заклинания (например, "IGNIS")
•	std::string description — краткое описание действия (например, "Поджигает врага, нанося урон каждый ход")
•	std::string effectType — тип эффекта ("Burning", "Slow", "Heal", "Freeze", "Buff", "Vampirism", "Ultimate")
•	int instantDamage — мгновенный урон, наносимый при применении
•	int duration — длительность эффекта в ходах (если есть, 0 — мгновенный)
•	int periodicDamage — урон, который наносится в конце каждого хода при длительном эффекте
•	int healAmount — количество восстанавливаемого здоровья
•	float chanceToApply — шанс наложения эффекта (например, 0.5 для GLACIA)
•	std::string unlockLocation — локация, с которой заклинание становится доступно
(например, "Начальная" для IGNIS, "Сожжённые джунгли" для VAMPIRUM)
•	bool isSelfTargeted — true, если заклинание применяется на героя (WATER, VITA и т.п.)
Методы:
•  void apply(Monster& target, Hero& caster)
	Применяет эффект заклинания к цели (монстру), учитывая иммунитеты.
	Вешает Effect на монстра (горение, заморозка и т.п.) или наносит урон.
•  void applySelf(Hero& hero)
	Используется, если isSelfTargeted == true.
	Применяет эффект на героя (лечение, усиление, снятие эффектов и т.д.)
•  bool isAvailableIn(std::string location)
	Проверяет, может ли быть использовано заклинание в данной локации.
	Сравнивает текущую локацию героя с unlockLocation.









Игрок сражается с монстрами и как только побеждает 3 монстра переходит в следующую локацию с другими монсрами.

СПЕЦИФИКАЦИИ ВСЕХ МОНСТРОВ
ЛОКАЦИЯ	НАЗВАНИЕ	УРОН	HP	ЭФФЕКТ
ПУСТОШЬ	Зомби	2	5	После своей атаки, если игрок его атаковал — получает +1 урона
ПУСТОШЬ	Низший скелет	3	4	Нет эффекта
СНЕЖНЫЕ РУИНЫ	Драург	4	8	25% шанс нанести двойной урон (2 удара по 4)
СНЕЖНЫЕ РУИНЫ	Гуль	5	10	50% шанс парализовать игрока на 1 ход
ПЕСЧАНЫЕ ПУСТОШИ	Ревенант	6	14	Иммунитет к огню
ПЕСЧАНЫЕ ПУСТОШИ	Мумия	7	16	50% шанс уменьшить урон игрока вдвое на 3 хода
СОЖЖЁННЫЕ ДЖУНГЛИ	Кровопийца	8	20	30% шанс отразить следующую атаку игрока
СОЖЖЁННЫЕ ДЖУНГЛИ	Дух	9	22	Иммунитет к льду
КРАТЕР	Рыцарь смерти	10	50	25% шанс нанести тройной урон (30 суммарно)





5. VAMPIRUM (Вампиризм)
Описание: Вампирское заклинание. Вытягивает силу врага — ворует 3 HP врага и лечит тебя на 3 HP.
Механика:
•	У врага -3 HP
•	Ты получаешь +3 к урону
•	Восстанавливаешь 3 HP
Применение:
cast VAMPIRUM —
“Ты насылаешь проклятие крови. Жизненная сила врага уходит к тебе.”
6. GLACIA (Лёд)
Описание: Обрушивает ледяной удар, нанося 5 урона и с шансом 50% замораживает врага на 1 ход.
Механика:
•	5 гарантированного урона
•	50% шанс обездвижить врага на следующий ход
Применение:
cast GLACIA —
“Ледяные осколки пронзают врага. Он может быть заморожен.”
7. VITA (Жизнь)
Описание: Мгновенно лечит 15 HP и снимает все негативные эффекты.
Механика:
•	Сильное исцеление, пригодится в критический момент
Применение:
cast VITA —
“Свет наполняет тебя. Боль отступает.”
Финальное заклинание (по сути только для победы над боссом):
8. UMBRA (Тьма)
Описание: Призывает абсолютную тьму, уничтожающую всё.
Механика:
•	Наносит 25 урона врагу
•	Похищает 15 твоего здоровья
Применение:
cast UMBRA —
“Тьма поглощает всё. Ни один свет не спасёт врага. Но за силу нужно платить.. своей кровью.”




ОСЛАБЛЕНИЕ	Урон ×0.5 на 2 хода
ЗАМОРОЗКА	Пропускает 1 ход
ПАРАЛИЧ	Пропускает 1 ход
ВАМПИРИЗМ	+3 урона игроку, -3 врагу, 2 хода
УКЛОНЕНИЕ	50% шанс избежать урона
УСИЛЕНИЕ	+50% к следующей атаке
ИММУНИТЕТ	Не воспринимает определённый эффект